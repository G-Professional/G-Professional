name: Update Lines Across All Repos (API)

permissions:
  contents: write

on:
  schedule:
    - cron: "0 0 * * 0"
  workflow_dispatch:

env:
  OWNER: ${{ github.repository_owner }}     # your GitHub login
  VISIBILITY: public                         # set to "all" to include private (needs PAT)

jobs:
  total:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ensure README block exists
        shell: bash
        run: |
          if [ ! -f README.md ]; then
            echo "# Hi, I'm $OWNER ðŸ‘‹" > README.md
            echo "" >> README.md
          fi
          if ! grep -q "<!-- ALL-REPOS-START -->" README.md; then
            printf "\n### ðŸ“Š Lines of code across all repos\n<!-- ALL-REPOS-START -->\n_updating..._\n<!-- ALL-REPOS-END -->\n" >> README.md
          fi

      - name: Auth for gh
        env:
          GH_TOKEN: ${{ secrets.REPOS_TOKEN || github.token }}
        run: |
          gh auth status || true

      - name: List repos
        id: list
        env:
          GH_TOKEN: ${{ secrets.REPOS_TOKEN || github.token }}
        run: |
          if [ "$VISIBILITY" = "all" ]; then scope="--visibility all"; else scope="--visibility public"; fi
          gh repo list "$OWNER" $scope --no-archived --json nameWithOwner,isFork \
            | jq -r '.[] | select(.isFork|not) | .nameWithOwner' > repos.txt
          echo "Found $(wc -l < repos.txt) repos"

      - name: Fetch contributor stats via API and sum
        env:
          GH_TOKEN: ${{ secrets.REPOS_TOKEN || github.token }}
          OWNER: ${{ env.OWNER }}
        run: |
          echo "repo,added,deleted,net" > summary.csv
          total_add=0; total_del=0

          while read -r repo; do
            echo "::group::$repo"
            # GitHub may return 202 while calculating; retry a few times
            tries=0
            while :; do
              code=$(gh api -H "Accept: application/vnd.github+json" \
                     "/repos/$repo/stats/contributors" \
                     --silent --write-out "%{http_code}" --output stats.json || echo 000)
              if [ "$code" = "200" ]; then break; fi
              if [ "$code" != "202" ] || [ $tries -ge 5 ]; then
                echo "Stats unavailable (HTTP $code)"; echo " ,0,0,0" >> summary.csv; break
              fi
              tries=$((tries+1))
              sleep 3
            done

            if [ -s stats.json ]; then
              # pick the entry whose author.login == OWNER, sum weeks
              adds=$(jq --arg u "$OWNER" '[.[] | select(.author.login==$u) | .weeks[] | .a] | add // 0' stats.json)
              dels=$(jq --arg u "$OWNER" '[.[] | select(.author.login==$u) | .weeks[] | .d] | add // 0' stats.json)
              net=$((adds - dels))
              echo "$repo,$adds,$dels,$net" >> summary.csv
              total_add=$((total_add + adds))
              total_del=$((total_del + dels))
              echo "adds=$adds dels=$dels net=$net"
            fi
            echo "::endgroup::"
          done < repos.txt

          printf "TOTAL,%d,%d,%d\n" "$total_add" "$total_del" "$((total_add-total_del))" >> summary.csv

      - name: Build README block
        run: |
          {
            echo '```text'
            tail -n +2 summary.csv | sort -t, -k4,4nr | awk -F, '
              BEGIN{ printf("%-40s %12s %12s %12s\n","repo","added","deleted","net")
                     printf("%-40s %12s %12s %12s\n","----------------------------------------","------------","------------","------------") }
              { if ($1=="TOTAL") next; printf("%-40s %12d %12d %12d\n",$1,$2,$3,$4) }
            '
            t=$(grep '^TOTAL,' summary.csv | tail -1)
            IFS=',' read -r _ ta td tn <<<"$t"
            echo
            printf "%-40s %12d %12d %12d\n" "GRAND TOTAL" "$ta" "$td" "$tn"
            echo '```'
          } > block.txt
          cat block.txt

      - name: Update README
        run: |
          awk -v repl="$(sed 's/[&/\]/\\&/g' block.txt | tr '\n' '\r')" '
            BEGIN{ start="<!-- ALL-REPOS-START -->"; end="<!-- ALL-REPOS-END -->" }
            $0 ~ start { print; print gensub(/\r/,"\n","g",repl); skip=1; next }
            $0 ~ end   { print; skip=0; next }
            !skip      { print }
          ' README.md > README.md.new
          mv README.md.new README.md

      - name: Commit changes
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add README.md summary.csv block.txt
          git commit -m "Update all-repos line stats (API)" || echo "No changes"
          git push
